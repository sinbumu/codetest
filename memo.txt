그냥 여러 생각나는 대로 메모용 

nest 구조에서 만든다면...

Patient , VitalSign , Alert , AlertCriteria 에 대해 각각 모듈을 만들어 줘야 할듯. 
기능이 복잡하면 서브 모듈도 필요 할 수 도 있것지만 아마 지금은 기능이 단순하니 하나씩만.
스키마도 위에 것들 맞춰서 하며 될듯?
디비도 빨리 만들려면 실무에 쓰던 몽고db베이스 하는게 좋을듯
현 기능상으로도 mongo를 써서 나쁠건 없을듯? 업데이트 보다는 새 데이터 작성 위주, 
누적되는 도큐먼트 뭉탱이 읽기 등에서 rdb보다 나쁠건 없어보임

몽고 쓸때 atlas에다 테스트 db 만들어 놓고 쓰다보니 별도 테스트용 인메모리 구축 생각한적이 없는데 테스트용 디비 구축좀 알아봐야 겠는데...



일단 모듈 만들고 > 스키마 정의하고 > 맞춰서 controller단 api 가공 부터 하자.

스키마 정의는 대략... 최소 필드만 넣는다 치고.

Common {//모든 스키마에 공통적으로 넣을거
    _id: ObjectId (실제 스크립트에선 문자열로 다루고(클라이언트에 넘길때도), mongoose에서(orm) 디비에 넘길때 알아서 변환하게 설정할 예정.)
    createdAt: Date
    updatedAt: Date
}

Patient {
}

VitalSign{
    type: number // 0 Temp 1 Pulse
    value: number // 몽고 타입은 double로 잡기로? 퀘스트 선에선 부동소수점때매 연산오류 나면 안되는 정밀성 필요하진 않아 보이니?
    patientId: ObjectId //환자 식별값
}

Alert{//최소 기능으로 보면 시간관련 요소들 createdAt 만으로 될듯? 
    patientId: ObjectId //환자 식별값
    acInfo: AlertCriteria
}

AlertCriteria{//이넘도 생성시에 각 AC간의 관계에서 모순되는 경우가 있나 체크하는 로직이 필요할까 ? > 일단 언급은 없었으니 생략
    vitalType: number // 0 Temp 1 Pulse
    ro: number // relation operator 관계 연산자... 0 < 1 <= 2 > 3 >= ...
}

*아 지금 생각하니 환자와의 관계 필드가 없음 추가...


update 처리에 관해선, 기능이 복잡해지거나 스키마에 필드가 많으면 중간에 업데이트할 데이터들 선별처리 하는 메소드를 따로 빼거나, 이터레이터 돌리거나 할 수 도 있것지만
여기선 그냥 if문 나열로만 처리 하는 걸로

Alert 의 경우는 VitalSign 데이터가 생성되는 시점에만 만들어 질 수 있겠지만 여기선 그냥 Controller에 만들어는 둠.


에러 핸들링도 일단은 전역적인 처리나, 에러 핸들링용 모듈 따로 만들지는 않고 그냥 서비스 라인에서 몇몇 것만...





